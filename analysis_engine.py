import os
from dotenv import load_dotenv
import google.generativeai as genai
from langchain.agents import initialize_agent
from langchain_community.tools import load_tools
from langchain.agents import initialize_agent, load_tools
from langchain.llms import Gemini

load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

def analyze_price_with_gemini(crypto_symbol, price):
    """
    Analyzes the current price of a cryptocurrency using Gemini Pro via Langchain.

    Args:
        crypto_symbol (str): The cryptocurrency symbol (e.g., 'BTC').
        price (float): The current price.

    Returns:
        str: Analysis generated by Gemini.
    """

    llm = Gemini(model_name="gemini-pro", google_api_key=GEMINI_API_KEY) # Specify gemini-pro

    tools = load_tools([], llm=llm) # No tools needed for this basic example, just LLM

    agent = initialize_agent(
        tools,
        llm,
        agent="zero-shot-react-description", # A simple agent type
        verbose=True # Set to True for more detailed output during agent execution
    )

    prompt = f"Analyze the current price of {crypto_symbol} which is ${price}. Provide a brief, insightful analysis. Focus on potential short-term trends or observations based on just this price point. Be concise."

    try:
        analysis = agent.run(prompt)
        return analysis
    except Exception as e:
        return f"Error during analysis with Gemini: {e}"


if __name__ == '__main__':
    # Example usage:
    crypto_symbol = 'BTC'
    current_price = 30500.0  # Replace with actual price from CryptoCompare later

    analysis_result = analyze_price_with_gemini(crypto_symbol, current_price)
    print(f"\nGemini Analysis for {crypto_symbol}:")
    print(analysis_result)